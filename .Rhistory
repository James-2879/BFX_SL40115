nadh_dna_seqs@ranges@NAMES <- clean_dna_names(nadh_dna_seqs@ranges@NAMES)
cyt_dna_seqs@ranges@NAMES <- clean_dna_names(cyt_dna_seqs@ranges@NAMES)
orn_dna_seqs@ranges@NAMES <- clean_dna_names(orn_dna_seqs@ranges@NAMES)
### User -------------------
temp <- readAAStringSet("/home/james/Documents/BFX_SL40115/sequences/translated/nadh_dehydrogenase.txt")
alignment <- msa(temp)
make_nj_tree(alignment = alignment,
protein = "NADH",
branch_lengths = FALSE)
### Next steps -----------------------------------------------------------------
# maybe look into different subsitution matrices also
# Examine the bootstrap support values on the branches of your phylogenetic tree. Support values indicate the proportion of bootstrap replicates that support a particular branch. Higher values (e.g., 70% or above) are generally considered more reliable.
# Can concatenate protein sequences BUT this is less good if they have different rates of evolution
####
### Printing the alignment -----------------------------------------------------
# print(nadh_alignment, show="complete")
# msaPrettyPrint(myFirstAlignment, output="pdf", showNames="none",
#                showLogo="none", askForOverwrite=FALSE, verbose=FALSE)
#
# msaPrettyPrint(myFirstAlignment, y=c(164, 213), output="asis",
#                showNames="none", showLogo="none", askForOverwrite=FALSE)
warnings()
library(tidyverse)
library(msa) # for sequence alignment
library(ape) # for neighbor joining
library(phangorn) # for MP, ML, Boostrapping
library(Biostrings)
library(seqinr)
setwd("/home/james/Documents/BFX_SL40115")
### Functions ------------------------------------------------------------------
clean_aa_names <- function(vector_obj) {
names <- vector_obj
new_names <- c()
for (x in 1:length(names)) {
string <- str_split(names, "\\[")[[x]][2]
string <- sub("]", "", string)
print(string)
new_names <- c(new_names, string)
}
return(new_names)
}
clean_dna_names <- function(vector_obj) {
names <- vector_obj
new_names <- c()
for (x in 1:length(names)) {
genus <- str_split(names, " ")[[x]][2]
species <- str_split(names, " ")[[x]][3]
string <- paste(genus, species)
print(string)
new_names <- c(new_names, string)
}
return(new_names)
}
accessions <- function(vector_obj) {
names <- vector_obj
new_names <- c()
for (x in 1:length(names)) {
string <- str_split(names, " ")[[x]][1]
# string <- sub("]", "", string)
print(string)
new_names <- c(new_names, string)
}
return(new_names)
}
make_nj_tree <- function(alignment, protein, branch_lengths) {
alignment <- msaConvert(alignment, type="seqinr::alignment")
distance_matrix <- seqinr::dist.alignment(alignment,
matrix = "identity")
tree <- nj(distance_matrix)
if (!branch_lengths) {
png(filename = str_glue("/home/james/Documents/BFX_SL40115/output/{protein}_nj_no_lengths.png"), width = 3600, height = 3600, res = 150)
plot.phylo(tree, main="Phylogenetic Tree",
use.edge.length = F)
mtext(text = "Rooted, no branch lengths")
} else if (branch_lengths) {
png(filename = str_glue("/home/james/Documents/BFX_SL40115/output/{protein}_nj_lengths.png"), width = 3600, height = 3600, res = 150)
plot.phylo(tree, main="Phylogenetic Tree",
use.edge.length = T)
mtext(text = "Rooted, with branch lengths")
}
dev.off()
}
make_mp_tree <- function(alignment, protein, branch_lengths) {
phydat_obj <- as.phyDat(alignment)
tree_nj <- nj(dist.hamming(phydat_obj))
parsimony(tree_nj, phydat_obj) # check parsimony
best_tree <- optim.parsimony(tree_nj, phydat_obj) # optimize tree
parsimony(best_tree, phydat_obj) # check parsimony again
if (!branch_lengths) {
png(filename = str_glue("/home/james/Documents/BFX_SL40115/output/{protein}_mp_no_lengths.png"), width = 3600, height = 3600, res = 150)
plot.phylo(best_tree, main="Phylogenetic Tree",
use.edge.length = F)
mtext(text = "Rooted, no branch lengths")
} else if (branch_lengths) {
png(filename = str_glue("/home/james/Documents/BFX_SL40115/output/{protein}_mp_lengths.png"), width = 3600, height = 3600, res = 150)
plot.phylo(best_tree, main="Phylogenetic Tree",
use.edge.length = T)
mtext(text = "Rooted, with branch lengths")
}
dev.off()
}
do_nj_bootstrap <- function(alignment, protein, branch_lengths, replicates) {
set.seed(123)
phydat_obj <- as.phyDat(alignment)
NJtrees <- bootstrap.phyDat(phydat_obj,
FUN=function(x)NJ(dist.hamming(x)), bs=replicates)
# treeNJ <- plotBS(tree_nj, NJtrees, "phylogram")
png(filename = str_glue("/home/james/Documents/BFX_SL40115/output/{protein}_nj_boostrap.png"), width = 3600, height = 3600, res = 150)
plotBS(tree_nj, NJtrees, "phylogram")
dev.off()
}
do_mp_boostrap <- function(alignment, protein, branch_lengths, replicates) {
set.seed(123)
phydat_obj <- as.phyDat(alignment)
treeMP <- pratchet(phydat_obj)
treeMP <- acctran(treeMP, phydat_obj)
BStrees <- bootstrap.phyDat(phydat_obj, pratchet, bs = replicates, multicore = TRUE)
png(filename = str_glue("/home/james/Documents/BFX_SL40115/output/{protein}_mp_boostrap.png"), width = 3600, height = 3600, res = 150)
plotBS(treeMP, BStrees, "phylogram")
add.scale.bar()
dev.off()
}
translate_dna_sequences <- function(sequences, protein) {
translated_sequences <- Biostrings::translate(sequences, if.fuzzy.codon = "X")
con <- file(str_glue("sequences/translated/{protein}.txt"), "w")
for (i in seq_along(translated_sequences)) {
writeLines(c(paste0(">", names(translated_sequences)[i]), as.character(translated_sequences[i]), "\n"), con)
}
close(con)
}
make_super_alignment <- function(alignments) {
phydat_alignments <- c()
for (alignment in alignments_list) {
converted_alignment <- as.phyDat(alignment)
phydat_alignments <- c(phydat_alignments, converted_alignment)
}
super_alignment <- do.call(cbind, phydat_alignments)
return(super_alignment)
}
## Script ----------------------------------------------------------------------
# load amino acid sequences
nadh_aa_seqs <-readAAStringSet("/home/james/Documents/BFX_SL40115/sequences/protein/nadh_dehydrogenase.txt")
cyt_aa_seqs <-readAAStringSet("/home/james/Documents/BFX_SL40115/sequences/protein/cyt_b.txt")
orn_aa_seqs <-readAAStringSet("/home/james/Documents/BFX_SL40115/sequences/protein/ornithine_dehydrogenase.txt")
# load DNA sequences
nadh_dna_seqs <-readDNAStringSet("/home/james/Documents/BFX_SL40115/sequences/gene/nadh_dehydrogenase.txt")
cyt_dna_seqs <-readDNAStringSet("/home/james/Documents/BFX_SL40115/sequences/gene/cyt_b.txt")
orn_dna_seqs <-readDNAStringSet("/home/james/Documents/BFX_SL40115/sequences/gene/ornithine_dehydrogenase.txt")
# translate DNA sequences
translate_dna_sequences(nadh_dna_seqs, protein = "nadh_dehydrogenase")
translate_dna_sequences(cyt_dna_seqs, protein = "cyt_b")
translate_dna_sequences(orn_dna_seqs, protein = "ornithine_dehydrogenase")
# load translated DNA sequences
nadh_translated_dna_seqs <-readAAStringSet("/home/james/Documents/BFX_SL40115/sequences/translated/nadh_dehydrogenase.txt")
cyt_translated_dna_seqs <-readAAStringSet("/home/james/Documents/BFX_SL40115/sequences/translated/cyt_b.txt")
orn_translated_dna_seqs <-readAAStringSet("/home/james/Documents/BFX_SL40115/sequences/translated/ornithine_dehydrogenase.txt")
# list of outgroups
outgroups <- c("Malurus cyaneus", "Climacteris rufus", "Epthianura aurifrons") # incomplete
# cleap up names for phylogram
nadh_aa_seqs@ranges@NAMES <- clean_aa_names(nadh_aa_seqs@ranges@NAMES)
cyt_aa_seqs@ranges@NAMES <- clean_aa_names(cyt_aa_seqs@ranges@NAMES)
orn_aa_seqs@ranges@NAMES <- clean_aa_names(orn_aa_seqs@ranges@NAMES)
nadh_dna_seqs@ranges@NAMES <- clean_dna_names(nadh_dna_seqs@ranges@NAMES)
cyt_dna_seqs@ranges@NAMES <- clean_dna_names(cyt_dna_seqs@ranges@NAMES)
orn_dna_seqs@ranges@NAMES <- clean_dna_names(orn_dna_seqs@ranges@NAMES)
nadh_translated_dna_seqs@ranges@NAMES <- clean_dna_names(nadh_translated_dna_seqs@ranges@NAMES)
cyt_translated_dna_seqs@ranges@NAMES <- clean_dna_names(cyt_translated_dna_seqs@ranges@NAMES)
orn_translated_dna_seqs@ranges@NAMES <- clean_dna_names(orn_translated_dna_seqs@ranges@NAMES)
### User -------------------
temp <- readAAStringSet("/home/james/Documents/BFX_SL40115/sequences/translated/nadh_dehydrogenase.txt")
alignment <- msa(temp)
make_nj_tree(alignment = alignment,
protein = "NADH",
branch_lengths = FALSE)
### Next steps -----------------------------------------------------------------
# maybe look into different subsitution matrices also
# Examine the bootstrap support values on the branches of your phylogenetic tree. Support values indicate the proportion of bootstrap replicates that support a particular branch. Higher values (e.g., 70% or above) are generally considered more reliable.
# Can concatenate protein sequences BUT this is less good if they have different rates of evolution
####
### Printing the alignment -----------------------------------------------------
# print(nadh_alignment, show="complete")
# msaPrettyPrint(myFirstAlignment, output="pdf", showNames="none",
#                showLogo="none", askForOverwrite=FALSE, verbose=FALSE)
#
# msaPrettyPrint(myFirstAlignment, y=c(164, 213), output="asis",
#                showNames="none", showLogo="none", askForOverwrite=FALSE)
library(tidyverse)
library(msa) # for sequence alignment
library(ape) # for neighbor joining
library(phangorn) # for MP, ML, Boostrapping
library(Biostrings)
library(seqinr)
setwd("/home/james/Documents/BFX_SL40115")
### Functions ------------------------------------------------------------------
clean_aa_names <- function(vector_obj) {
names <- vector_obj
new_names <- c()
for (x in 1:length(names)) {
string <- str_split(names, "\\[")[[x]][2]
string <- sub("]", "", string)
print(string)
new_names <- c(new_names, string)
}
return(new_names)
}
clean_dna_names <- function(vector_obj) {
names <- vector_obj
new_names <- c()
for (x in 1:length(names)) {
genus <- str_split(names, " ")[[x]][2]
species <- str_split(names, " ")[[x]][3]
string <- paste(genus, species)
print(string)
new_names <- c(new_names, string)
}
return(new_names)
}
accessions <- function(vector_obj) {
names <- vector_obj
new_names <- c()
for (x in 1:length(names)) {
string <- str_split(names, " ")[[x]][1]
# string <- sub("]", "", string)
print(string)
new_names <- c(new_names, string)
}
return(new_names)
}
make_nj_tree <- function(alignment, protein, branch_lengths) {
alignment <- msaConvert(alignment, type="seqinr::alignment")
distance_matrix <- seqinr::dist.alignment(alignment,
matrix = "identity")
tree <- nj(distance_matrix)
if (!branch_lengths) {
png(filename = str_glue("/home/james/Documents/BFX_SL40115/output/{protein}_nj_no_lengths.png"), width = 3600, height = 3600, res = 150)
plot.phylo(tree, main="Phylogenetic Tree",
use.edge.length = F)
mtext(text = "Rooted, no branch lengths")
} else if (branch_lengths) {
png(filename = str_glue("/home/james/Documents/BFX_SL40115/output/{protein}_nj_lengths.png"), width = 3600, height = 3600, res = 150)
plot.phylo(tree, main="Phylogenetic Tree",
use.edge.length = T)
mtext(text = "Rooted, with branch lengths")
}
dev.off()
}
make_mp_tree <- function(alignment, protein, branch_lengths) {
phydat_obj <- as.phyDat(alignment)
tree_nj <- nj(dist.hamming(phydat_obj))
parsimony(tree_nj, phydat_obj) # check parsimony
best_tree <- optim.parsimony(tree_nj, phydat_obj) # optimize tree
parsimony(best_tree, phydat_obj) # check parsimony again
if (!branch_lengths) {
png(filename = str_glue("/home/james/Documents/BFX_SL40115/output/{protein}_mp_no_lengths.png"), width = 3600, height = 3600, res = 150)
plot.phylo(best_tree, main="Phylogenetic Tree",
use.edge.length = F)
mtext(text = "Rooted, no branch lengths")
} else if (branch_lengths) {
png(filename = str_glue("/home/james/Documents/BFX_SL40115/output/{protein}_mp_lengths.png"), width = 3600, height = 3600, res = 150)
plot.phylo(best_tree, main="Phylogenetic Tree",
use.edge.length = T)
mtext(text = "Rooted, with branch lengths")
}
dev.off()
}
do_nj_bootstrap <- function(alignment, protein, branch_lengths, replicates) {
set.seed(123)
phydat_obj <- as.phyDat(alignment)
NJtrees <- bootstrap.phyDat(phydat_obj,
FUN=function(x)NJ(dist.hamming(x)), bs=replicates)
# treeNJ <- plotBS(tree_nj, NJtrees, "phylogram")
png(filename = str_glue("/home/james/Documents/BFX_SL40115/output/{protein}_nj_boostrap.png"), width = 3600, height = 3600, res = 150)
plotBS(tree_nj, NJtrees, "phylogram")
dev.off()
}
do_mp_boostrap <- function(alignment, protein, branch_lengths, replicates) {
set.seed(123)
phydat_obj <- as.phyDat(alignment)
treeMP <- pratchet(phydat_obj)
treeMP <- acctran(treeMP, phydat_obj)
BStrees <- bootstrap.phyDat(phydat_obj, pratchet, bs = replicates, multicore = TRUE)
png(filename = str_glue("/home/james/Documents/BFX_SL40115/output/{protein}_mp_boostrap.png"), width = 3600, height = 3600, res = 150)
plotBS(treeMP, BStrees, "phylogram")
add.scale.bar()
dev.off()
}
translate_dna_sequences <- function(sequences, protein) {
translated_sequences <- Biostrings::translate(sequences, if.fuzzy.codon = "X")
con <- file(str_glue("sequences/translated/{protein}.txt"), "w")
for (i in seq_along(translated_sequences)) {
writeLines(c(paste0(">", names(translated_sequences)[i]), as.character(translated_sequences[i]), "\n"), con)
}
close(con)
}
make_super_alignment <- function(alignments) {
phydat_alignments <- c()
for (alignment in alignments_list) {
converted_alignment <- as.phyDat(alignment)
phydat_alignments <- c(phydat_alignments, converted_alignment)
}
super_alignment <- do.call(cbind, phydat_alignments)
return(super_alignment)
}
## Script ----------------------------------------------------------------------
# load amino acid sequences
nadh_aa_seqs <-readAAStringSet("/home/james/Documents/BFX_SL40115/sequences/protein/nadh_dehydrogenase.txt")
cyt_aa_seqs <-readAAStringSet("/home/james/Documents/BFX_SL40115/sequences/protein/cyt_b.txt")
orn_aa_seqs <-readAAStringSet("/home/james/Documents/BFX_SL40115/sequences/protein/ornithine_dehydrogenase.txt")
# load DNA sequences
nadh_dna_seqs <-readDNAStringSet("/home/james/Documents/BFX_SL40115/sequences/gene/nadh_dehydrogenase.txt")
cyt_dna_seqs <-readDNAStringSet("/home/james/Documents/BFX_SL40115/sequences/gene/cyt_b.txt")
orn_dna_seqs <-readDNAStringSet("/home/james/Documents/BFX_SL40115/sequences/gene/ornithine_dehydrogenase.txt")
# translate DNA sequences
translate_dna_sequences(nadh_dna_seqs, protein = "nadh_dehydrogenase")
translate_dna_sequences(cyt_dna_seqs, protein = "cyt_b")
translate_dna_sequences(orn_dna_seqs, protein = "ornithine_dehydrogenase")
# load translated DNA sequences
nadh_translated_dna_seqs <-readAAStringSet("/home/james/Documents/BFX_SL40115/sequences/translated/nadh_dehydrogenase.txt")
cyt_translated_dna_seqs <-readAAStringSet("/home/james/Documents/BFX_SL40115/sequences/translated/cyt_b.txt")
orn_translated_dna_seqs <-readAAStringSet("/home/james/Documents/BFX_SL40115/sequences/translated/ornithine_dehydrogenase.txt")
# list of outgroups
outgroups <- c("Malurus cyaneus", "Climacteris rufus", "Epthianura aurifrons") # incomplete
# cleap up names for phylogram
nadh_aa_seqs@ranges@NAMES <- clean_aa_names(nadh_aa_seqs@ranges@NAMES)
cyt_aa_seqs@ranges@NAMES <- clean_aa_names(cyt_aa_seqs@ranges@NAMES)
orn_aa_seqs@ranges@NAMES <- clean_aa_names(orn_aa_seqs@ranges@NAMES)
nadh_dna_seqs@ranges@NAMES <- clean_dna_names(nadh_dna_seqs@ranges@NAMES)
cyt_dna_seqs@ranges@NAMES <- clean_dna_names(cyt_dna_seqs@ranges@NAMES)
orn_dna_seqs@ranges@NAMES <- clean_dna_names(orn_dna_seqs@ranges@NAMES)
nadh_translated_dna_seqs@ranges@NAMES <- clean_dna_names(nadh_translated_dna_seqs@ranges@NAMES)
cyt_translated_dna_seqs@ranges@NAMES <- clean_dna_names(cyt_translated_dna_seqs@ranges@NAMES)
orn_translated_dna_seqs@ranges@NAMES <- clean_dna_names(orn_translated_dna_seqs@ranges@NAMES)
### User -------------------
alignment <- msa(nadh_translated_dna_seqs)
make_nj_tree(alignment = alignment,
protein = "NADH",
branch_lengths = FALSE)
### Next steps -----------------------------------------------------------------
# maybe look into different subsitution matrices also
# Examine the bootstrap support values on the branches of your phylogenetic tree. Support values indicate the proportion of bootstrap replicates that support a particular branch. Higher values (e.g., 70% or above) are generally considered more reliable.
# Can concatenate protein sequences BUT this is less good if they have different rates of evolution
####
### Printing the alignment -----------------------------------------------------
# print(nadh_alignment, show="complete")
# msaPrettyPrint(myFirstAlignment, output="pdf", showNames="none",
#                showLogo="none", askForOverwrite=FALSE, verbose=FALSE)
#
# msaPrettyPrint(myFirstAlignment, y=c(164, 213), output="asis",
#                showNames="none", showLogo="none", askForOverwrite=FALSE)
library(tidyverse)
library(msa) # for sequence alignment
library(ape) # for neighbor joining
library(phangorn) # for MP, ML, Boostrapping
library(Biostrings)
library(seqinr)
setwd("/home/james/Documents/BFX_SL40115")
### Functions ------------------------------------------------------------------
clean_aa_names <- function(vector_obj) {
names <- vector_obj
new_names <- c()
for (x in 1:length(names)) {
string <- str_split(names, "\\[")[[x]][2]
string <- sub("]", "", string)
print(string)
new_names <- c(new_names, string)
}
return(new_names)
}
clean_dna_names <- function(vector_obj) {
names <- vector_obj
new_names <- c()
for (x in 1:length(names)) {
genus <- str_split(names, " ")[[x]][2]
species <- str_split(names, " ")[[x]][3]
string <- paste(genus, species)
print(string)
new_names <- c(new_names, string)
}
return(new_names)
}
accessions <- function(vector_obj) {
names <- vector_obj
new_names <- c()
for (x in 1:length(names)) {
string <- str_split(names, " ")[[x]][1]
# string <- sub("]", "", string)
print(string)
new_names <- c(new_names, string)
}
return(new_names)
}
make_nj_tree <- function(alignment, protein, branch_lengths) {
alignment <- msaConvert(alignment, type="seqinr::alignment")
distance_matrix <- seqinr::dist.alignment(alignment,
matrix = "identity")
tree <- nj(distance_matrix)
if (!branch_lengths) {
png(filename = str_glue("output/{protein}_nj_no_lengths.png"), width = 3600, height = 3600, res = 150)
plot.phylo(tree, main="Phylogenetic Tree",
use.edge.length = F)
mtext(text = "Rooted, no branch lengths")
} else if (branch_lengths) {
png(filename = str_glue("output/{protein}_nj_lengths.png"), width = 3600, height = 3600, res = 150)
plot.phylo(tree, main="Phylogenetic Tree",
use.edge.length = T)
mtext(text = "Rooted, with branch lengths")
}
dev.off()
}
make_mp_tree <- function(alignment, protein, branch_lengths) {
phydat_obj <- as.phyDat(alignment)
tree_nj <- nj(dist.hamming(phydat_obj))
parsimony(tree_nj, phydat_obj) # check parsimony
best_tree <- optim.parsimony(tree_nj, phydat_obj) # optimize tree
parsimony(best_tree, phydat_obj) # check parsimony again
if (!branch_lengths) {
png(filename = str_glue("output/{protein}_mp_no_lengths.png"), width = 3600, height = 3600, res = 150)
plot.phylo(best_tree, main="Phylogenetic Tree",
use.edge.length = F)
mtext(text = "Rooted, no branch lengths")
} else if (branch_lengths) {
png(filename = str_glue("output/{protein}_mp_lengths.png"), width = 3600, height = 3600, res = 150)
plot.phylo(best_tree, main="Phylogenetic Tree",
use.edge.length = T)
mtext(text = "Rooted, with branch lengths")
}
dev.off()
}
do_nj_bootstrap <- function(alignment, protein, branch_lengths, replicates) {
set.seed(123)
phydat_obj <- as.phyDat(alignment)
NJtrees <- bootstrap.phyDat(phydat_obj,
FUN=function(x)NJ(dist.hamming(x)), bs=replicates)
# treeNJ <- plotBS(tree_nj, NJtrees, "phylogram")
png(filename = str_glue("output/{protein}_nj_boostrap.png"), width = 3600, height = 3600, res = 150)
plotBS(tree_nj, NJtrees, "phylogram")
dev.off()
}
do_mp_boostrap <- function(alignment, protein, branch_lengths, replicates) {
set.seed(123)
phydat_obj <- as.phyDat(alignment)
treeMP <- pratchet(phydat_obj)
treeMP <- acctran(treeMP, phydat_obj)
BStrees <- bootstrap.phyDat(phydat_obj, pratchet, bs = replicates, multicore = TRUE)
png(filename = str_glue("output/{protein}_mp_boostrap.png"), width = 3600, height = 3600, res = 150)
plotBS(treeMP, BStrees, "phylogram")
add.scale.bar()
dev.off()
}
translate_dna_sequences <- function(sequences, protein) {
translated_sequences <- Biostrings::translate(sequences, if.fuzzy.codon = "X")
con <- file(str_glue("sequences/translated/{protein}.txt"), "w")
for (i in seq_along(translated_sequences)) {
writeLines(c(paste0(">", names(translated_sequences)[i]), as.character(translated_sequences[i]), "\n"), con)
}
close(con)
}
make_super_alignment <- function(alignments) {
phydat_alignments <- c()
for (alignment in alignments_list) {
converted_alignment <- as.phyDat(alignment)
phydat_alignments <- c(phydat_alignments, converted_alignment)
}
super_alignment <- do.call(cbind, phydat_alignments)
return(super_alignment)
}
## Script ----------------------------------------------------------------------
# load amino acid sequences
nadh_aa_seqs <-readAAStringSet("sequences/protein/nadh_dehydrogenase.txt")
cyt_aa_seqs <-readAAStringSet("sequences/protein/cyt_b.txt")
orn_aa_seqs <-readAAStringSet("sequences/protein/ornithine_dehydrogenase.txt")
# load DNA sequences
nadh_dna_seqs <-readDNAStringSet("sequences/gene/nadh_dehydrogenase.txt")
cyt_dna_seqs <-readDNAStringSet("sequences/gene/cyt_b.txt")
orn_dna_seqs <-readDNAStringSet("sequences/gene/ornithine_dehydrogenase.txt")
# translate DNA sequences
translate_dna_sequences(nadh_dna_seqs, protein = "nadh_dehydrogenase")
translate_dna_sequences(cyt_dna_seqs, protein = "cyt_b")
translate_dna_sequences(orn_dna_seqs, protein = "ornithine_dehydrogenase")
# load translated DNA sequences
nadh_translated_dna_seqs <-readAAStringSet("sequences/translated/nadh_dehydrogenase.txt")
cyt_translated_dna_seqs <-readAAStringSet("sequences/translated/cyt_b.txt")
orn_translated_dna_seqs <-readAAStringSet("sequences/translated/ornithine_dehydrogenase.txt")
# list of outgroups
outgroups <- c("Malurus cyaneus", "Climacteris rufus", "Epthianura aurifrons") # incomplete
# cleap up names for phylogram
nadh_aa_seqs@ranges@NAMES <- clean_aa_names(nadh_aa_seqs@ranges@NAMES)
cyt_aa_seqs@ranges@NAMES <- clean_aa_names(cyt_aa_seqs@ranges@NAMES)
orn_aa_seqs@ranges@NAMES <- clean_aa_names(orn_aa_seqs@ranges@NAMES)
nadh_dna_seqs@ranges@NAMES <- clean_dna_names(nadh_dna_seqs@ranges@NAMES)
cyt_dna_seqs@ranges@NAMES <- clean_dna_names(cyt_dna_seqs@ranges@NAMES)
orn_dna_seqs@ranges@NAMES <- clean_dna_names(orn_dna_seqs@ranges@NAMES)
nadh_translated_dna_seqs@ranges@NAMES <- clean_dna_names(nadh_translated_dna_seqs@ranges@NAMES)
cyt_translated_dna_seqs@ranges@NAMES <- clean_dna_names(cyt_translated_dna_seqs@ranges@NAMES)
orn_translated_dna_seqs@ranges@NAMES <- clean_dna_names(orn_translated_dna_seqs@ranges@NAMES)
### User -------------------
alignment <- msa(nadh_translated_dna_seqs)
make_nj_tree(alignment = alignment,
protein = "NADH",
branch_lengths = FALSE)
### Next steps -----------------------------------------------------------------
# maybe look into different subsitution matrices also
# Examine the bootstrap support values on the branches of your phylogenetic tree. Support values indicate the proportion of bootstrap replicates that support a particular branch. Higher values (e.g., 70% or above) are generally considered more reliable.
# Can concatenate protein sequences BUT this is less good if they have different rates of evolution
####
### Printing the alignment -----------------------------------------------------
# print(nadh_alignment, show="complete")
# msaPrettyPrint(myFirstAlignment, output="pdf", showNames="none",
#                showLogo="none", askForOverwrite=FALSE, verbose=FALSE)
#
# msaPrettyPrint(myFirstAlignment, y=c(164, 213), output="asis",
#                showNames="none", showLogo="none", askForOverwrite=FALSE)
